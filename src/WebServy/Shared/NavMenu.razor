@using WebServy.Data
@inject AppState AppState

<ul class="nav flex-column">
    <li class="nav-item text-center">
        <NavLinkPreventDefault class="nav-link" href="" Match="NavLinkMatch.All" @onclick="() => SetLastUsedWebServiceUuid(null)">
            <img src="img/logo.svg" width="30" height="30" alt="" hidden="@(AppState.Config.UseIconNavBar.Value == false)">
            <span hidden="@AppState.Config.UseIconNavBar.Value">Home</span>
        </NavLinkPreventDefault>
    </li>
    @foreach (var webService in AppState.Config.WebServices.Where(ws => ws.Enabled.Value))
    {
        <li class="nav-item text-center">
            <NavLinkPreventDefault class="nav-link" href="@($"service/{webService.Uuid}")" @onclick="() => SetLastUsedWebServiceUuid(webService)">
                <img src="@(webService.IconUrl == string.Empty ? "img/logo.svg" : webService.IconUrl)" width="30" height="30" alt="" hidden="@(AppState.Config.UseIconNavBar.Value == false)">
                <span hidden="@AppState.Config.UseIconNavBar.Value">@webService.Name</span>
                <span class="badge badge-danger" hidden="@(webService.UnreadMessagesCount.Value == 0)">@webService.UnreadMessagesCount.Value</span>
            </NavLinkPreventDefault>
        </li>
    }
</ul>

@code {
    protected override void OnInitialized()
    {
        foreach(var webService in AppState.Config.WebServices.Where(ws => ws.Enabled.Value))
        {
            webService.UnreadMessagesCount.Changed += (_, _) => StateHasChanged();
        }
        AppState.Config.WebServices.CollectionChanged += (_, e) =>
        {
            if (e.NewItems is not null)
            {
                foreach(var webService in e.NewItems.Cast<WebService>().Where(ws => ws.Enabled.Value).ToArray())
                {
                    webService.UnreadMessagesCount.Changed += (_, _) => StateHasChanged();
                }
            }
            StateHasChanged();
        };
        AppState.Config.UseIconNavBar.Changed += (_, _) => StateHasChanged();
    }

    private void SetLastUsedWebServiceUuid(WebService? webService) => AppState.Config.LastUsedWebServiceUuid.Value = webService?.Uuid;
}
